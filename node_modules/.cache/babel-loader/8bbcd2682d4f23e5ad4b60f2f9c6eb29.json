{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/mta/year 4/final project/Algros/src/problem/components/Answer.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { Dropdown, Selection } from \"react-dropdown-now\";\nimport \"react-dropdown-now/style.css\";\nimport { VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\nimport \"./Answer.css\";\n\nconst Answer = props => {\n  const courseId = useParams().courseId.toString();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedSubmissionResult, setLoadedSubmissionResult] = useState(\" \");\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(0);\n  const [selectedLanguage, setSelectedLanguage] = useState(\"java\");\n  const javaTemplate = \"import java.util.Scanner; \\n\" + \"\\n\" + \"public class Solution { \\n\" + \"\tpublic static void main(String[] args) {\\n\" + \"\t\tScanner myObj = new Scanner(System.in); \\n\" + \"\t\tint x = myObj.nextInt(); \\n\" + \"\t\tSystem.out.println(reverse(x));\\n\" + \"\t} \\n\" + \"\t\\n\" + \"\tpublic static int reverse(int x) {\\n\" + \"\t\t\\n\" + \"\t}\\n\" + \"}\";\n  const python3Template = 'using System;class Program{ static void Main() { int x = 10; int y = 25; int z = x + y; Console.Write(\"Sum of x + y = \"+ z); }}';\n  const languageOptions = [{\n    id: \"java\",\n    value: \"java\",\n    label: \"java\"\n  }, {\n    id: \"python3\",\n    value: \"python3\",\n    label: \"python3\"\n  }];\n  useEffect(() => {\n    setloadedQuestionIndex(props.questionIndex);\n  }, [props]);\n  const [formState, inputHandler, setFormData] = useForm({\n    answer: {\n      value: \"\",\n      isValid: false\n    },\n    result: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const submitQuestion = async () => {\n    try {\n      console.log(\"answer string to send=\");\n      console.log(document.getElementById(\"answer\").value.replace(/(\\r\\n|\\n|\\r)/gm, \"\"));\n      const userId = JSON.parse(localStorage.getItem(\"userData\")).userId.toString();\n      const answerSubmissionResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/submit\", \"POST\", JSON.stringify({\n        answer: document.getElementById(\"answer\").value,\n        language: selectedLanguage,\n        version: \"0\",\n        courseId: courseId,\n        userId: userId,\n        questionId: loadedQuestionIndex.toString()\n      }), {});\n      let submissionResult = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, answerSubmissionResponse.error ? /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"red\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, answerSubmissionResponse.error) : /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"green\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      }, \"Passed\"), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, `output: ${answerSubmissionResponse.output}`), !answerSubmissionResponse.error && /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, `memory:${answerSubmissionResponse.memory},  cpu time:${answerSubmissionResponse.cpuTime}`));\n      setLoadedSubmissionResult(submissionResult);\n    } catch (err) {}\n  };\n\n  const authSubmitHandler = event => {\n    event.preventDefault();\n    submitQuestion();\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"answer-pane\",\n    onSubmit: authSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"codearea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, selectedLanguage === \"java\" && /*#__PURE__*/React.createElement(Input, {\n    id: \"answer\",\n    type: \"text\",\n    element: \"codearea\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid code answer\",\n    placeholder: \"write your code here\",\n    onInput: inputHandler,\n    language: \"java\",\n    initialValue: javaTemplate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), selectedLanguage === \"python3\" && /*#__PURE__*/React.createElement(Input, {\n    id: \"answer\",\n    type: \"text\",\n    element: \"codearea\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid code answer\",\n    placeholder: \"write your code here\",\n    onInput: inputHandler,\n    language: \"csharp\",\n    initialValue: python3Template,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"language-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    id: \"languages-dropdown\",\n    placeholder: \"Select an option\",\n    options: languageOptions,\n    value: \"java\",\n    onSelect: value => {\n      setSelectedLanguage(value.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"item-relative\",\n    type: \"submit\",\n    disabled: formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, \"Submit\"), !isLoading && /*#__PURE__*/React.createElement(\"label\", {\n    id: \"result\",\n    for: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, loadedSubmissionResult)));\n};\n\nexport default Answer;","map":{"version":3,"sources":["/home/alex/Documents/mta/year 4/final project/Algros/src/problem/components/Answer.js"],"names":["React","useEffect","useState","useParams","Input","Button","useHttpClient","ErrorModal","LoadingSpinner","Dropdown","Selection","VALIDATOR_MINLENGTH","useForm","Answer","props","courseId","toString","isLoading","error","sendRequest","clearError","loadedSubmissionResult","setLoadedSubmissionResult","loadedQuestionIndex","setloadedQuestionIndex","selectedLanguage","setSelectedLanguage","javaTemplate","python3Template","languageOptions","id","value","label","questionIndex","formState","inputHandler","setFormData","answer","isValid","result","submitQuestion","console","log","document","getElementById","replace","userId","JSON","parse","localStorage","getItem","answerSubmissionResponse","stringify","language","version","questionId","submissionResult","color","output","memory","cpuTime","err","authSubmitHandler","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { Dropdown, Selection } from \"react-dropdown-now\";\nimport \"react-dropdown-now/style.css\";\nimport { VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\n\nimport \"./Answer.css\";\n\nconst Answer = (props) => {\n  const courseId = useParams().courseId.toString();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedSubmissionResult, setLoadedSubmissionResult] = useState(\" \");\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(0);\n  const [selectedLanguage, setSelectedLanguage] = useState(\"java\");\n\n  const javaTemplate =\n    \"import java.util.Scanner; \\n\" +\n    \"\\n\" +\n    \"public class Solution { \\n\" +\n    \"\tpublic static void main(String[] args) {\\n\" +\n    \"\t\tScanner myObj = new Scanner(System.in); \\n\" +\n    \"\t\tint x = myObj.nextInt(); \\n\" +\n    \"\t\tSystem.out.println(reverse(x));\\n\" +\n    \"\t} \\n\" +\n    \"\t\\n\" +\n    \"\tpublic static int reverse(int x) {\\n\" +\n    \"\t\t\\n\" +\n    \"\t}\\n\" +\n    \"}\";\n  const python3Template =\n    'using System;class Program{ static void Main() { int x = 10; int y = 25; int z = x + y; Console.Write(\"Sum of x + y = \"+ z); }}';\n\n  const languageOptions = [\n    { id: \"java\", value: \"java\", label: \"java\" },\n    { id: \"python3\", value: \"python3\", label: \"python3\" },\n  ];\n\n  useEffect(() => {\n    setloadedQuestionIndex(props.questionIndex);\n  }, [props]);\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      answer: {\n        value: \"\",\n        isValid: false,\n      },\n      result: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const submitQuestion = async () => {\n    try {\n      console.log(\"answer string to send=\");\n      console.log(\n        document.getElementById(\"answer\").value.replace(/(\\r\\n|\\n|\\r)/gm, \"\")\n      );\n\n      const userId = JSON.parse(\n        localStorage.getItem(\"userData\")\n      ).userId.toString();\n\n      const answerSubmissionResponse = await sendRequest(\n        \"http://51.138.73.135:8080/Algors/submit\",\n        \"POST\",\n        JSON.stringify({\n          answer: document.getElementById(\"answer\").value,\n          language: selectedLanguage,\n          version: \"0\",\n          courseId: courseId,\n          userId: userId,\n          questionId: loadedQuestionIndex.toString(),\n        }),\n        {}\n      );\n\n      let submissionResult = (\n        <div>\n          {answerSubmissionResponse.error ? (\n            <h3 style={{ color: \"red\" }}>{answerSubmissionResponse.error}</h3>\n          ) : (\n            <h3 style={{ color: \"green\" }}>Passed</h3>\n          )}\n          <h3>{`output: ${answerSubmissionResponse.output}`}</h3>\n          {!answerSubmissionResponse.error && (\n            <h4>{`memory:${answerSubmissionResponse.memory},  cpu time:${answerSubmissionResponse.cpuTime}`}</h4>\n          )}\n        </div>\n      );\n\n      setLoadedSubmissionResult(submissionResult);\n    } catch (err) {}\n  };\n\n  const authSubmitHandler = (event) => {\n    event.preventDefault();\n    submitQuestion();\n  };\n\n  return (\n    <form className=\"answer-pane\" onSubmit={authSubmitHandler}>\n      <div className=\"codearea\">\n        {selectedLanguage === \"java\" && (\n          <Input\n            id=\"answer\"\n            type=\"text\"\n            element=\"codearea\"\n            validators={[VALIDATOR_MINLENGTH(3)]}\n            errorText=\"Please enter a valid code answer\"\n            placeholder=\"write your code here\"\n            onInput={inputHandler}\n            language=\"java\"\n            initialValue={javaTemplate}\n          />\n        )}\n        {selectedLanguage === \"python3\" && (\n          <Input\n            id=\"answer\"\n            type=\"text\"\n            element=\"codearea\"\n            validators={[VALIDATOR_MINLENGTH(3)]}\n            errorText=\"Please enter a valid code answer\"\n            placeholder=\"write your code here\"\n            onInput={inputHandler}\n            language=\"csharp\"\n            initialValue={python3Template}\n          />\n        )}\n      </div>\n      <div className=\"answer-footer\">\n        <ErrorModal error={error} onClear={clearError} />\n        {isLoading && (\n          <div className=\"center\">\n            <LoadingSpinner />\n          </div>\n        )}\n        <div className=\"language-selector\">\n          <Dropdown\n            id=\"languages-dropdown\"\n            placeholder=\"Select an option\"\n            options={languageOptions}\n            value=\"java\"\n            onSelect={(value) => {\n              setSelectedLanguage(value.value);\n            }}\n          />\n        </div>\n\n        <Button\n          className=\"item-relative\"\n          type=\"submit\"\n          disabled={formState.isValid}\n        >\n          Submit\n        </Button>\n        {!isLoading && (\n          <label id=\"result\" for=\"submit\">\n            {loadedSubmissionResult}\n          </label>\n        )}\n      </div>\n    </form>\n  );\n};\n\nexport default Answer;\n"]},"metadata":{},"sourceType":"module"}