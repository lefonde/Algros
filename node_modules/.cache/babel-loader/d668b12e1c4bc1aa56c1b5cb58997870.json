{"ast":null,"code":"'use strict';\n\nmodule.exports = encode; // Encode special characters in `value`.\n\nfunction encode(value, options) {\n  value = value.replace(options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g, basic);\n\n  if (options.subset || options.escapeOnly) {\n    return value;\n  }\n\n  return value // Surrogate pairs.\n  .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate) // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n  // non-ASCII ones).\n  .replace( // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g, basic);\n\n  function surrogate(pair, index, all) {\n    return options.format((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, all.charCodeAt(index + 2), options);\n  }\n\n  function basic(character, index, all) {\n    return options.format(character.charCodeAt(0), all.charCodeAt(index + 1), options);\n  }\n}\n\nfunction charactersToExpression(subset) {\n  var groups = [];\n  var index = -1;\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'));\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g');\n}","map":null,"metadata":{},"sourceType":"script"}