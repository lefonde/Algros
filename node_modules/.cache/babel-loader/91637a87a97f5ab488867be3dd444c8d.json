{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saris\\\\Documents\\\\Alex\\\\final project BAK 2\\\\src\\\\problem\\\\components\\\\Answer.js\";\nimport React, { createRef, useEffect, useState } from \"react\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\nimport \"./Answer.css\";\n\nconst Answer = props => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedSubmissionResult, setLoadedSubmissionResult] = useState(\" \");\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(0);\n  useEffect(() => {\n    setloadedQuestionIndex(props.questionIndex);\n  }, [props]);\n  const codeString = \"public class Solution {public static void main(String[] args) {System.out.println(-321);} }\";\n  const [formState, inputHandler, setFormData] = useForm({\n    answer: {\n      value: \"\",\n      isValid: false\n    },\n    result: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const submitQuestion = async () => {\n    try {\n      console.log(loadedQuestionIndex);\n      const answerSubmissionResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/submit\", \"POST\", JSON.stringify({\n        answer: codeString,\n        language: \"java\",\n        version: \"0\",\n        courseId: \"1\",\n        userId: \"1\",\n        questionId: loadedQuestionIndex.toString()\n      }), {});\n      console.log(answerSubmissionResponse);\n      let submitResultString = `output:${answerSubmissionResponse.output}, memory:${answerSubmissionResponse.memory}, cpu time:${answerSubmissionResponse.cpuTime}`;\n      console.log(\"answerSubmissionResponse=\");\n      console.log(submitResultString);\n      setLoadedSubmissionResult(submitResultString);\n    } catch (err) {}\n\n    console.log(loadedSubmissionResult);\n  };\n\n  const authSubmitHandler = event => {\n    event.preventDefault();\n    submitQuestion();\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"codeare\",\n    id: \"answer\",\n    element: \"codearea\",\n    label: \"Your answer:\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid code answer\",\n    placeholder: \"test placeholder\",\n    onInput: inputHandler,\n    initialValue: codeString,\n    language: \"js\",\n    value: codeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Submit\"), !isLoading && /*#__PURE__*/React.createElement(\"label\", {\n    id: \"result\",\n    for: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, loadedSubmissionResult));\n};\n\nexport default Answer;","map":{"version":3,"sources":["C:/Users/saris/Documents/Alex/final project BAK 2/src/problem/components/Answer.js"],"names":["React","createRef","useEffect","useState","Input","Button","useHttpClient","ErrorModal","LoadingSpinner","VALIDATOR_MINLENGTH","useForm","Answer","props","isLoading","error","sendRequest","clearError","loadedSubmissionResult","setLoadedSubmissionResult","loadedQuestionIndex","setloadedQuestionIndex","questionIndex","codeString","formState","inputHandler","setFormData","answer","value","isValid","result","submitQuestion","console","log","answerSubmissionResponse","JSON","stringify","language","version","courseId","userId","questionId","toString","submitResultString","output","memory","cpuTime","err","authSubmitHandler","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, useState } from \"react\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\n\nimport \"./Answer.css\";\n\nconst Answer = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedSubmissionResult, setLoadedSubmissionResult] = useState(\" \");\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(0);\n\n  useEffect(() => {\n    setloadedQuestionIndex(props.questionIndex);\n  }, [props]);\n\n  const codeString =\n    \"public class Solution {public static void main(String[] args) {System.out.println(-321);} }\";\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      answer: {\n        value: \"\",\n        isValid: false,\n      },\n      result: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const submitQuestion = async () => {\n    try {\n      console.log(loadedQuestionIndex);\n      const answerSubmissionResponse = await sendRequest(\n        \"http://51.138.73.135:8080/Algors/submit\",\n        \"POST\",\n        JSON.stringify({\n          answer: codeString,\n          language: \"java\",\n          version: \"0\",\n          courseId: \"1\",\n          userId: \"1\",\n          questionId: loadedQuestionIndex.toString(),\n        }),\n        {}\n      );\n      console.log(answerSubmissionResponse);\n\n      let submitResultString = `output:${answerSubmissionResponse.output}, memory:${answerSubmissionResponse.memory}, cpu time:${answerSubmissionResponse.cpuTime}`;\n      console.log(\"answerSubmissionResponse=\");\n      console.log(submitResultString);\n\n      setLoadedSubmissionResult(submitResultString);\n    } catch (err) {}\n    console.log(loadedSubmissionResult);\n  };\n\n  const authSubmitHandler = (event) => {\n    event.preventDefault();\n    submitQuestion();\n  };\n\n  return (\n    <form onSubmit={authSubmitHandler}>\n      <Input\n        className=\"codeare\"\n        id=\"answer\"\n        element=\"codearea\"\n        label=\"Your answer:\"\n        validators={[VALIDATOR_MINLENGTH(3)]}\n        errorText=\"Please enter a valid code answer\"\n        placeholder=\"test placeholder\"\n        onInput={inputHandler}\n        initialValue={codeString}\n        language=\"js\"\n        value={codeString}\n      />\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <Button type=\"submit\" disabled={formState.isValid}>\n        Submit\n      </Button>\n      {!isLoading && (\n        <label id=\"result\" for=\"submit\">\n          {loadedSubmissionResult}\n        </label>\n      )}\n    </form>\n  );\n};\n\nexport default Answer;\n"]},"metadata":{},"sourceType":"module"}