{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/mta/year 4/final project/Algros/src/problem/pages/Problem.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport { useParams } from \"react-router-dom\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = false;\n  const courseId = useParams().courseId.toString();\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedMessages, setLoadedMessages] = useState(false);\n  const [loadedQuestions, setloadedQuestions] = useState([]);\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(null);\n  const [forumMessages, setforumMessages] = useState([]);\n  let questionIndex = 0;\n\n  const updateQuestionIndexHandler = newIndex => {\n    questionIndex = newIndex;\n    setloadedQuestionIndex(newIndex);\n    fetchAllForumMessages(newIndex);\n    console.log(\"updated question index=\");\n    console.log(newIndex);\n  };\n\n  const fetchAllForumMessages = async index => {\n    setLoadedMessages(false);\n\n    try {\n      const forumMessagesResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/allForumMessage\", \"POST\", JSON.stringify({\n        questionId: index.toString()\n      }), {});\n      setforumMessages(forumMessagesResponse.messages);\n      setLoadedMessages(true);\n      console.log(\"forum messages index=\");\n      console.log(index);\n    } catch (err) {}\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n  }, []);\n  useEffect(() => {\n    const userId = JSON.parse(localStorage.getItem(\"userData\")).userId.toString();\n\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/questions\", \"POST\", JSON.stringify({\n          userId: userId,\n          courseId: courseId\n        }), {});\n        console.log(\"questionsResponse\");\n        console.log(questionsResponse);\n        setloadedQuestions(questionsResponse.questions);\n        questionIndex = questionsResponse.firstQuestionIndex;\n        setloadedQuestionIndex(questionsResponse.firstQuestionIndex);\n      } catch (err) {}\n    };\n\n    fetchQuestions();\n  }, [sendRequest]);\n  useEffect(() => {\n    if (DEBUG) {\n      const DEBUG_allForumMessages = {\n        messages: {\n          1: {\n            messageId: 1,\n            messageDate: \"2021-08-31\",\n            userName: \"mor\",\n            body: \"test\",\n            questionNumber: 1\n          }\n        }\n      };\n      const DEBUG_allQuestions = {\n        firstQuestionIndex: 1,\n        questions: {\n          1: {\n            questionId: 1,\n            level: \"Easy\",\n            questionName: \"sum\",\n            done: true,\n            questionBody: \"user gets two numbers and return the sum\"\n          },\n          2: {\n            questionId: 2,\n            level: \"Easy\",\n            questionName: \"array sum\",\n            done: false,\n            questionBody: \"user gets arrayrs and return the sum\"\n          }\n        }\n      };\n      setloadedQuestions(DEBUG_allQuestions.questions);\n      setloadedQuestionIndex(DEBUG_allQuestions.firstQuestionIndex);\n      console.log(DEBUG_allForumMessages.messages);\n      setforumMessages(DEBUG_allForumMessages.messages[loadedQuestionIndex]);\n      console.log(loadedQuestions);\n      console.log(forumMessages);\n      return;\n    }\n\n    fetchAllForumMessages(questionIndex);\n  }, [sendRequest]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"problem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SplitPane, {\n    split: \"vertical\",\n    minSize: 400,\n    defaultSize: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-pane\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Pane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, !isLoading && loadedMessages && /*#__PURE__*/React.createElement(Question, {\n    questions: loadedQuestions,\n    index: loadedQuestionIndex,\n    messages: forumMessages,\n    onIndexChange: updateQuestionIndexHandler,\n    onNewForumMessage: fetchAllForumMessages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Pane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Answer, {\n    questionIndex: loadedQuestionIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Problem;","map":{"version":3,"sources":["/home/alex/Documents/mta/year 4/final project/Algros/src/problem/pages/Problem.js"],"names":["React","useEffect","useState","useContext","SplitPane","Pane","useParams","ErrorModal","LoadingSpinner","useHttpClient","AuthContext","Answer","Question","Problem","DEBUG","courseId","toString","auth","isLoading","error","sendRequest","clearError","loadedMessages","setLoadedMessages","loadedQuestions","setloadedQuestions","loadedQuestionIndex","setloadedQuestionIndex","forumMessages","setforumMessages","questionIndex","updateQuestionIndexHandler","newIndex","fetchAllForumMessages","console","log","index","forumMessagesResponse","JSON","stringify","questionId","messages","err","document","body","style","overflow","userId","parse","localStorage","getItem","fetchQuestions","questionsResponse","questions","firstQuestionIndex","DEBUG_allForumMessages","messageId","messageDate","userName","questionNumber","DEBUG_allQuestions","level","questionName","done","questionBody"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport { useParams } from \"react-router-dom\";\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\n\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = false;\n  const courseId = useParams().courseId.toString();\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedMessages, setLoadedMessages] = useState(false);\n  const [loadedQuestions, setloadedQuestions] = useState([]);\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(null);\n  const [forumMessages, setforumMessages] = useState([]);\n  let questionIndex = 0;\n\n  const updateQuestionIndexHandler = (newIndex) => {\n    questionIndex = newIndex;\n    setloadedQuestionIndex(newIndex);\n    fetchAllForumMessages(newIndex);\n    console.log(\"updated question index=\");\n    console.log(newIndex);\n  };\n\n  const fetchAllForumMessages = async (index) => {\n    setLoadedMessages(false);\n    try {\n      const forumMessagesResponse = await sendRequest(\n        \"http://51.138.73.135:8080/Algors/allForumMessage\",\n        \"POST\",\n        JSON.stringify({\n          questionId: index.toString(),\n        }),\n        {}\n      );\n      setforumMessages(forumMessagesResponse.messages);\n      setLoadedMessages(true);\n      console.log(\"forum messages index=\");\n      console.log(index);\n    } catch (err) {}\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n  }, []);\n\n  useEffect(() => {\n    const userId = JSON.parse(\n      localStorage.getItem(\"userData\")\n    ).userId.toString();\n\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/questions\",\n          \"POST\",\n          JSON.stringify({\n            userId: userId,\n            courseId: courseId,\n          }),\n          {}\n        );\n        console.log(\"questionsResponse\");\n        console.log(questionsResponse);\n        setloadedQuestions(questionsResponse.questions);\n        questionIndex = questionsResponse.firstQuestionIndex;\n        setloadedQuestionIndex(questionsResponse.firstQuestionIndex);\n      } catch (err) {}\n    };\n\n    fetchQuestions();\n  }, [sendRequest]);\n\n  useEffect(() => {\n    if (DEBUG) {\n      const DEBUG_allForumMessages = {\n        messages: {\n          1: {\n            messageId: 1,\n            messageDate: \"2021-08-31\",\n            userName: \"mor\",\n            body: \"test\",\n            questionNumber: 1,\n          },\n        },\n      };\n\n      const DEBUG_allQuestions = {\n        firstQuestionIndex: 1,\n        questions: {\n          1: {\n            questionId: 1,\n            level: \"Easy\",\n            questionName: \"sum\",\n            done: true,\n            questionBody: \"user gets two numbers and return the sum\",\n          },\n          2: {\n            questionId: 2,\n            level: \"Easy\",\n            questionName: \"array sum\",\n            done: false,\n            questionBody: \"user gets arrayrs and return the sum\",\n          },\n        },\n      };\n\n      setloadedQuestions(DEBUG_allQuestions.questions);\n      setloadedQuestionIndex(DEBUG_allQuestions.firstQuestionIndex);\n      console.log(DEBUG_allForumMessages.messages);\n      setforumMessages(DEBUG_allForumMessages.messages[loadedQuestionIndex]);\n\n      console.log(loadedQuestions);\n      console.log(forumMessages);\n      return;\n    }\n\n    fetchAllForumMessages(questionIndex);\n  }, [sendRequest]);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className=\"problem\">\n        <SplitPane split=\"vertical\" minSize={400} defaultSize={600}>\n          <div className=\"left-pane\">\n            <Pane>\n              {!isLoading && loadedMessages && (\n                <Question\n                  questions={loadedQuestions}\n                  index={loadedQuestionIndex}\n                  messages={forumMessages}\n                  onIndexChange={updateQuestionIndexHandler}\n                  onNewForumMessage={fetchAllForumMessages}\n                />\n              )}\n            </Pane>\n          </div>\n          <Pane>\n            <Answer questionIndex={loadedQuestionIndex} />\n          </Pane>\n        </SplitPane>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Problem;\n"]},"metadata":{},"sourceType":"module"}