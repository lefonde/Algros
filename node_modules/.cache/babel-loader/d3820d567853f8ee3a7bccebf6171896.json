{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/mta/year 4/final project/Algros/src/problem/pages/Problem.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport { useParams } from \"react-router-dom\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = false;\n  const courseId = useParams().courseId;\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedQuestions, setloadedQuestions] = useState([]);\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(null);\n  const [forumMessages, setforumMessages] = useState([]);\n  let questionIndex = 0;\n\n  const updateQuestionIndexHandler = newIndex => {\n    questionIndex = newIndex;\n    setloadedQuestionIndex(newIndex);\n    console.log(\"updated question index=\");\n    console.log(newIndex);\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n  }, []);\n  useEffect(() => {\n    const userId = JSON.parse(localStorage.getItem(\"userData\")).userId.toString();\n\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/questions\", \"POST\", JSON.stringify({\n          userId: userId,\n          courseId: courseId.toString()\n        }), {});\n        console.log(\"questionsResponse\");\n        console.log(questionsResponse);\n        setloadedQuestions(questionsResponse.questions);\n        questionIndex = questionsResponse.firstQuestionIndex;\n        setloadedQuestionIndex(questionsResponse.firstQuestionIndex);\n      } catch (err) {}\n    };\n\n    fetchQuestions();\n  }, [sendRequest]);\n  useEffect(() => {\n    if (DEBUG) {\n      const DEBUG_allForumMessages = {\n        messages: {\n          1: {\n            messageId: 1,\n            messageDate: \"2021-08-31\",\n            userName: \"mor\",\n            body: \"test\",\n            questionNumber: 1\n          }\n        }\n      };\n      const DEBUG_allQuestions = {\n        firstQuestionIndex: 1,\n        questions: {\n          1: {\n            questionId: 1,\n            level: \"Easy\",\n            questionName: \"sum\",\n            done: true,\n            questionBody: \"user gets two numbers and return the sum\"\n          },\n          2: {\n            questionId: 2,\n            level: \"Easy\",\n            questionName: \"array sum\",\n            done: false,\n            questionBody: \"user gets arrayrs and return the sum\"\n          }\n        }\n      };\n      setloadedQuestions(DEBUG_allQuestions.questions);\n      setloadedQuestionIndex(DEBUG_allQuestions.firstQuestionIndex);\n      console.log(DEBUG_allForumMessages.messages);\n      setforumMessages(DEBUG_allForumMessages.messages[loadedQuestionIndex]);\n      console.log(loadedQuestions);\n      console.log(forumMessages);\n      return;\n    }\n\n    const fetchAllForumMessages = async () => {\n      try {\n        const forumMessagesResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/allForumMessage\", \"POST\", JSON.stringify({\n          questionId: questionIndex.toString()\n        }), {});\n        setforumMessages(forumMessagesResponse.messages);\n      } catch (err) {}\n    };\n\n    fetchAllForumMessages();\n  }, [sendRequest, loadedQuestionIndex]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"problem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SplitPane, {\n    split: \"vertical\",\n    minSize: 400,\n    defaultSize: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left-pane\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Pane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, (!isLoading || DEBUG) && /*#__PURE__*/React.createElement(Question, {\n    questions: loadedQuestions,\n    index: loadedQuestionIndex,\n    messages: forumMessages,\n    onIndexChange: updateQuestionIndexHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Pane, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Answer, {\n    questionIndex: loadedQuestionIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Problem;","map":{"version":3,"sources":["/home/alex/Documents/mta/year 4/final project/Algros/src/problem/pages/Problem.js"],"names":["React","useEffect","useState","useContext","SplitPane","Pane","useParams","ErrorModal","LoadingSpinner","useHttpClient","AuthContext","Answer","Question","Problem","DEBUG","courseId","auth","isLoading","error","sendRequest","clearError","loadedQuestions","setloadedQuestions","loadedQuestionIndex","setloadedQuestionIndex","forumMessages","setforumMessages","questionIndex","updateQuestionIndexHandler","newIndex","console","log","document","body","style","overflow","userId","JSON","parse","localStorage","getItem","toString","fetchQuestions","questionsResponse","stringify","questions","firstQuestionIndex","err","DEBUG_allForumMessages","messages","messageId","messageDate","userName","questionNumber","DEBUG_allQuestions","questionId","level","questionName","done","questionBody","fetchAllForumMessages","forumMessagesResponse"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport { useParams } from \"react-router-dom\";\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\n\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = false;\n  const courseId = useParams().courseId;\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedQuestions, setloadedQuestions] = useState([]);\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState(null);\n  const [forumMessages, setforumMessages] = useState([]);\n  let questionIndex = 0;\n\n  const updateQuestionIndexHandler = (newIndex) => {\n    questionIndex = newIndex;\n    setloadedQuestionIndex(newIndex);\n    console.log(\"updated question index=\");\n    console.log(newIndex);\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n  }, []);\n\n  useEffect(() => {\n    const userId = JSON.parse(\n      localStorage.getItem(\"userData\")\n    ).userId.toString();\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/questions\",\n          \"POST\",\n          JSON.stringify({\n            userId: userId,\n            courseId: courseId.toString(),\n          }),\n          {}\n        );\n        console.log(\"questionsResponse\");\n        console.log(questionsResponse);\n        setloadedQuestions(questionsResponse.questions);\n        questionIndex = questionsResponse.firstQuestionIndex;\n        setloadedQuestionIndex(questionsResponse.firstQuestionIndex);\n      } catch (err) {}\n    };\n\n    fetchQuestions();\n  }, [sendRequest]);\n\n  useEffect(() => {\n    if (DEBUG) {\n      const DEBUG_allForumMessages = {\n        messages: {\n          1: {\n            messageId: 1,\n            messageDate: \"2021-08-31\",\n            userName: \"mor\",\n            body: \"test\",\n            questionNumber: 1,\n          },\n        },\n      };\n\n      const DEBUG_allQuestions = {\n        firstQuestionIndex: 1,\n        questions: {\n          1: {\n            questionId: 1,\n            level: \"Easy\",\n            questionName: \"sum\",\n            done: true,\n            questionBody: \"user gets two numbers and return the sum\",\n          },\n          2: {\n            questionId: 2,\n            level: \"Easy\",\n            questionName: \"array sum\",\n            done: false,\n            questionBody: \"user gets arrayrs and return the sum\",\n          },\n        },\n      };\n\n      setloadedQuestions(DEBUG_allQuestions.questions);\n      setloadedQuestionIndex(DEBUG_allQuestions.firstQuestionIndex);\n      console.log(DEBUG_allForumMessages.messages);\n      setforumMessages(DEBUG_allForumMessages.messages[loadedQuestionIndex]);\n\n      console.log(loadedQuestions);\n      console.log(forumMessages);\n      return;\n    }\n\n    const fetchAllForumMessages = async () => {\n      try {\n        const forumMessagesResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/allForumMessage\",\n          \"POST\",\n          JSON.stringify({\n            questionId: questionIndex.toString(),\n          }),\n          {}\n        );\n        setforumMessages(forumMessagesResponse.messages);\n      } catch (err) {}\n    };\n\n    fetchAllForumMessages();\n  }, [sendRequest, loadedQuestionIndex]);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className=\"problem\">\n        <SplitPane split=\"vertical\" minSize={400} defaultSize={600}>\n          <div className=\"left-pane\">\n            <Pane>\n              {(!isLoading || DEBUG) && (\n                <Question\n                  questions={loadedQuestions}\n                  index={loadedQuestionIndex}\n                  messages={forumMessages}\n                  onIndexChange={updateQuestionIndexHandler}\n                />\n              )}\n            </Pane>\n          </div>\n          <Pane>\n            <Answer questionIndex={loadedQuestionIndex} />\n          </Pane>\n        </SplitPane>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Problem;\n"]},"metadata":{},"sourceType":"module"}