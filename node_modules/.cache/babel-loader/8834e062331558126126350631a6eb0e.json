{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = liquid;\nliquid.displayName = 'liquid';\nliquid.aliases = [];\n\nfunction liquid(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.languages.liquid = {\n    comment: {\n      pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n      lookbehind: true\n    },\n    delimiter: {\n      pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n      alias: 'punctuation'\n    },\n    string: {\n      pattern: /\"[^\"]*\"|'[^']*'/,\n      greedy: true\n    },\n    keyword: /\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n    function: [{\n      pattern: /(\\|\\s*)\\w+/,\n      lookbehind: true,\n      alias: 'filter'\n    }, {\n      // array functions\n      pattern: /(\\.\\s*)(?:first|last|size)/,\n      lookbehind: true\n    }],\n    boolean: /\\b(?:true|false|nil)\\b/,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,\n    punctuation: /[.,\\[\\]()]/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var liquidPattern = /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g;\n    var insideRaw = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {\n      var tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match);\n\n      if (tagMatch) {\n        var tag = tagMatch[1];\n\n        if (tag === 'raw' && !insideRaw) {\n          insideRaw = true;\n          return true;\n        } else if (tag === 'endraw') {\n          insideRaw = false;\n          return true;\n        }\n      }\n\n      return !insideRaw;\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');\n  });\n}","map":null,"metadata":{},"sourceType":"script"}