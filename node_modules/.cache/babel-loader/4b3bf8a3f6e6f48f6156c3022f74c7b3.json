{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nexport var SelectionText = /*#__PURE__*/function () {\n  function SelectionText(elm) {\n    _classCallCheck(this, SelectionText);\n\n    this.elm = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.value = void 0;\n    var selectionStart = elm.selectionStart,\n        selectionEnd = elm.selectionEnd;\n    this.elm = elm;\n    this.start = selectionStart;\n    this.end = selectionEnd;\n    this.value = this.elm.value;\n  }\n\n  _createClass(SelectionText, [{\n    key: \"position\",\n    value: function position(start, end) {\n      var _this$elm = this.elm,\n          selectionStart = _this$elm.selectionStart,\n          selectionEnd = _this$elm.selectionEnd;\n      this.start = typeof start === 'number' && !isNaN(start) ? start : selectionStart;\n      this.end = typeof end === 'number' && !isNaN(end) ? end : selectionEnd;\n      this.elm.selectionStart = this.start;\n      this.elm.selectionEnd = this.end;\n      return this;\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(text) {\n      // Most of the used APIs only work with the field selected\n      this.elm.focus();\n      this.elm.setRangeText(text);\n      this.value = this.elm.value;\n      this.position();\n      return this;\n    }\n  }, {\n    key: \"getSelectedValue\",\n    value: function getSelectedValue(start, end) {\n      var _this$elm2 = this.elm,\n          selectionStart = _this$elm2.selectionStart,\n          selectionEnd = _this$elm2.selectionEnd;\n      return this.value.slice(typeof start === 'number' && !isNaN(start) ? start : selectionStart, typeof end === 'number' && !isNaN(end) ? start : selectionEnd);\n    }\n  }, {\n    key: \"getLineStartNumber\",\n    value: function getLineStartNumber() {\n      var start = this.start;\n\n      while (start > 0) {\n        start--;\n\n        if (this.value.charAt(start) === '\\n') {\n          start++;\n          break;\n        }\n      }\n\n      return start;\n    }\n    /** Indent on new lines */\n\n  }, {\n    key: \"getIndentText\",\n    value: function getIndentText() {\n      var start = this.getLineStartNumber();\n      var str = this.getSelectedValue(start);\n      var indent = '';\n      str.replace(/(^(\\s)+)/, function (str, old) {\n        return indent = old;\n      });\n      return indent;\n    }\n  }, {\n    key: \"lineStarInstert\",\n    value: function lineStarInstert(text) {\n      if (text) {\n        var oldStart = this.start;\n        var start = this.getLineStartNumber();\n        var str = this.getSelectedValue(start);\n        this.position(start, this.end).insertText(str.split('\\n').map(function (txt) {\n          return text + txt;\n        }).join('\\n')).position(oldStart + text.length, this.end);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"lineStarRemove\",\n    value: function lineStarRemove(text) {\n      if (text) {\n        var oldStart = this.start;\n        var start = this.getLineStartNumber();\n        var str = this.getSelectedValue(start);\n        var reg = new RegExp(\"^\".concat(text), 'g');\n        var newStart = oldStart - text.length;\n\n        if (!reg.test(str)) {\n          newStart = oldStart;\n        }\n\n        this.position(start, this.end).insertText(str.split('\\n').map(function (txt) {\n          return txt.replace(reg, '');\n        }).join('\\n')).position(newStart, this.end);\n      }\n    }\n    /** Notify any possible listeners of the change */\n\n  }, {\n    key: \"notifyChange\",\n    value: function notifyChange() {\n      var event = new Event('input', {\n        bubbles: true,\n        cancelable: false\n      });\n      this.elm.dispatchEvent(event);\n    }\n  }]);\n\n  return SelectionText;\n}();","map":null,"metadata":{},"sourceType":"module"}