{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saris\\\\Documents\\\\Alex\\\\final project BAK 2\\\\src\\\\problem\\\\components\\\\Answer.js\";\nimport React, { useState } from \"react\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\nimport \"./Answer.css\";\n\nconst Answer = () => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedSubmissionResult, setLoadedSubmissionResult] = useState([]);\n  const codeString = \"public class Solution {public static void main(String[] args) {System.out.println(-321);} }\";\n  const [formState, inputHandler] = useForm({\n    answer: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const submitQuestion = async () => {\n    try {\n      const answerSubmissionResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/submit\", \"POST\", JSON.stringify({\n        answer: codeString,\n        language: \"java\",\n        version: \"0\",\n        courseId: \"1\",\n        userId: \"1\",\n        questionId: \"1\"\n      }), {});\n      console.log(answerSubmissionResponse);\n      setLoadedSubmissionResult(answerSubmissionResponse);\n    } catch (err) {}\n  };\n\n  const authSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  const [code, setCode] = React.useState(\"public class Solution {public static void main(String[] args) {System.out.println(-321);} }\");\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"codeare\",\n    id: \"answer\",\n    element: \"codearea\",\n    label: \"Your answer:\",\n    validators: [VALIDATOR_MINLENGTH(3)],\n    errorText: \"Please enter a valid code answer\",\n    placeholder: \"test placeholder\",\n    onInput: inputHandler,\n    initialValue: codeString,\n    language: \"js\",\n    value: codeString,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    onClick: submitQuestion,\n    disabled: formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n};\n\nexport default Answer;","map":{"version":3,"sources":["C:/Users/saris/Documents/Alex/final project BAK 2/src/problem/components/Answer.js"],"names":["React","useState","Input","Button","useHttpClient","ErrorModal","LoadingSpinner","VALIDATOR_MINLENGTH","useForm","Answer","isLoading","error","sendRequest","clearError","loadedSubmissionResult","setLoadedSubmissionResult","codeString","formState","inputHandler","answer","value","isValid","submitQuestion","answerSubmissionResponse","JSON","stringify","language","version","courseId","userId","questionId","console","log","err","authSubmitHandler","event","preventDefault","inputs","code","setCode"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\n\nimport \"./Answer.css\";\n\nconst Answer = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedSubmissionResult, setLoadedSubmissionResult] = useState([]);\n\n  const codeString =\n    \"public class Solution {public static void main(String[] args) {System.out.println(-321);} }\";\n\n  const [formState, inputHandler] = useForm(\n    {\n      answer: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const submitQuestion = async () => {\n    try {\n      const answerSubmissionResponse = await sendRequest(\n        \"http://51.138.73.135:8080/Algors/submit\",\n        \"POST\",\n        JSON.stringify({\n          answer: codeString,\n          language: \"java\",\n          version: \"0\",\n          courseId: \"1\",\n          userId: \"1\",\n          questionId: \"1\",\n        }),\n        {}\n      );\n      console.log(answerSubmissionResponse);\n      setLoadedSubmissionResult(answerSubmissionResponse)\n    } catch (err) {}\n  };\n\n  const authSubmitHandler = (event) => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  const [code, setCode] = React.useState(\n    \"public class Solution {public static void main(String[] args) {System.out.println(-321);} }\"\n  );\n\n  return (\n    <form onSubmit={authSubmitHandler}>\n      <Input\n        className=\"codeare\"\n        id=\"answer\"\n        element=\"codearea\"\n        label=\"Your answer:\"\n        validators={[VALIDATOR_MINLENGTH(3)]}\n        errorText=\"Please enter a valid code answer\"\n        placeholder=\"test placeholder\"\n        onInput={inputHandler}\n        initialValue={codeString}\n        language=\"js\"\n        value={codeString}\n      />\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <Button type=\"submit\" onClick={submitQuestion} disabled={formState.isValid}>\n        Submit\n      </Button>\n    </form>\n  );\n};\n\nexport default Answer;\n"]},"metadata":{},"sourceType":"module"}