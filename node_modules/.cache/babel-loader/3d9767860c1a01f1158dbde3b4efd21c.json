{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"value\", \"padding\", \"minHeight\", \"placeholder\", \"language\", \"className\", \"style\", \"onChange\"];\nimport React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport \"./style/index.css\";\nexport * from './SelectionText';\nexport default /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'w-tc-editor' : _props$prefixCls,\n      _ = props.value,\n      _props$padding = props.padding,\n      padding = _props$padding === void 0 ? 10 : _props$padding,\n      _props$minHeight = props.minHeight,\n      minHeight = _props$minHeight === void 0 ? 16 : _props$minHeight,\n      placeholder = props.placeholder,\n      language = props.language,\n      className = props.className,\n      style = props.style,\n      _onChange = props.onChange,\n      other = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(props.value || ''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  useEffect(function () {\n    return setValue(props.value || '');\n  }, [props.value]);\n  var textRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return textRef.current;\n  });\n  var contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding\n  };\n  var htmlStr = useMemo(function () {\n    return processHtml(\"<pre aria-hidden=true><code \".concat(language ? \"class=\\\"language-\".concat(language, \"\\\"\") : '', \" >\").concat(htmlEncode(String(value || '')), \"</code><br /></pre>\"));\n  }, [value, language]);\n  var preView = useMemo(function () {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: _objectSpread(_objectSpread(_objectSpread({}, styles.editor), contentStyle), {}, {\n        minHeight: minHeight\n      }),\n      className: \"\".concat(prefixCls, \"-preview \").concat(language ? \"language-\".concat(language) : ''),\n      dangerouslySetInnerHTML: {\n        __html: htmlStr\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [prefixCls, language, htmlStr]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: _objectSpread(_objectSpread({}, styles.container), style),\n    className: \"\".concat(prefixCls, \" \").concat(className || '')\n  }, /*#__PURE__*/React.createElement(\"textarea\", _extends({\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: \"false\",\n    autoCapitalize: \"off\"\n  }, other, {\n    placeholder: placeholder,\n    onKeyDown: function onKeyDown(evn) {\n      shortcuts(evn);\n      other.onKeyDown && other.onKeyDown(evn);\n    },\n    style: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, styles.editor), styles.textarea), contentStyle), {}, {\n      minHeight: minHeight\n    }, placeholder && !value ? {\n      WebkitTextFillColor: 'inherit'\n    } : {}),\n    ref: textRef,\n    onChange: function onChange(evn) {\n      setValue(evn.target.value);\n      _onChange && _onChange(evn);\n    },\n    className: \"\".concat(prefixCls, \"-text\"),\n    value: value\n  })), preView);\n});","map":null,"metadata":{},"sourceType":"module"}