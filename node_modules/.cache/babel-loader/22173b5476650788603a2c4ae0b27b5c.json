{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/mta/year 4/final project/Algros/src/courses/pages/Courses.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport CoursesList from \"../components/CoursesList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./Courses.css\";\n\nconst Courses = () => {\n  const DEBUG = false;\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedAllCourses, setLoadedAllCourses] = useState([]);\n  const [updatedAllCourses, setUpdatedAllCourses] = useState([]);\n  const [loadedUserCourses, setLoadedUserCourses] = useState([]);\n  let allCourses = [];\n  let userCoursesList = [];\n  useEffect(() => {\n    document.body.style.background = \"#ffffff\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.height = \"100%\";\n    document.body.style.margin = \"0\";\n    document.body.style.backgroundAttachment = \"fixed\";\n  }, []);\n  useEffect(() => {\n    const fetchAllCourses = async () => {\n      try {\n        const allCoursesResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/allCourses\");\n        setLoadedAllCourses(allCoursesResponse.courses);\n        setUpdatedAllCourses(true);\n        allCourses = allCoursesResponse.courses;\n      } catch (err) {}\n    };\n\n    fetchAllCourses();\n  }, [sendRequest]);\n  useEffect(() => {\n    const fetchUserCourses = async () => {\n      try {\n        const userId = JSON.parse(localStorage.getItem(\"userData\")).userId.toString();\n        const userCoursesResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/userCourses\", \"POST\", JSON.stringify({\n          userId: userId\n        }), {});\n        Object.values(loadedAllCourses).map((currentCourse, idx1) => {\n          Object.values(userCoursesResponse.userCourses).map((userCourse, idx2) => {\n            if (currentCourse.courseId === userCourse.courseId) userCoursesList.push({\n              courseId: currentCourse.courseId,\n              courseName: currentCourse.courseName,\n              subjects: currentCourse.subjects,\n              questionsAmount: userCourse.questionAmount,\n              courseCompletion: `${parseInt(userCourse.questionCompletedAmount / userCourse.questionAmount * 100)}%`\n            });\n          });\n        });\n        setLoadedUserCourses(userCoursesList); // setLoadedAllCourses((allCourses) =>\n        //   allCourses.filter((course) => {\n        //     userCoursesList.forEach((userCourse) => {\n        //       if (userCourse.courseId === course.courseId) return true;\n        //     });\n        //     return false;\n        //   })\n        // );\n      } catch (err) {}\n    };\n\n    fetchUserCourses();\n  }, [sendRequest, loadedAllCourses]);\n  useEffect(() => {\n    setUpdatedAllCourses(Object.values(loadedAllCourses).filter(course => {\n      loadedUserCourses.forEach(userCourse => {\n        console.log(userCourse.courseId === course.courseId);\n\n        if (userCourse.courseId === course.courseId) {\n          return false;\n        }\n      });\n      return true;\n    }));\n  }, [loadedUserCourses]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"courses-list_user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Your courses\"), (!isLoading || DEBUG) && /*#__PURE__*/React.createElement(CoursesList, {\n    items: loadedUserCourses,\n    className: \"course-list__list\",\n    user: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"courses-list_all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, \"All Courses\"), (!isLoading || DEBUG) && /*#__PURE__*/React.createElement(CoursesList, {\n    items: updatedAllCourses,\n    className: \"course-list__list\",\n    all: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Courses;","map":{"version":3,"sources":["/home/alex/Documents/mta/year 4/final project/Algros/src/courses/pages/Courses.js"],"names":["React","useEffect","useState","useContext","ErrorModal","CoursesList","LoadingSpinner","useHttpClient","Courses","DEBUG","isLoading","error","sendRequest","clearError","loadedAllCourses","setLoadedAllCourses","updatedAllCourses","setUpdatedAllCourses","loadedUserCourses","setLoadedUserCourses","allCourses","userCoursesList","document","body","style","background","backgroundRepeat","height","margin","backgroundAttachment","fetchAllCourses","allCoursesResponse","courses","err","fetchUserCourses","userId","JSON","parse","localStorage","getItem","toString","userCoursesResponse","stringify","Object","values","map","currentCourse","idx1","userCourses","userCourse","idx2","courseId","push","courseName","subjects","questionsAmount","questionAmount","courseCompletion","parseInt","questionCompletedAmount","filter","course","forEach","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AAEA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AAEA,OAAO,eAAP;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,KAAK,GAAG,KAAd;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDN,aAAa,EAAnE;AACA,QAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACc,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,CAAC,EAAD,CAA1D;AAGA,QAAM,CAACgB,iBAAD,EAAoBC,oBAApB,IAA4CjB,QAAQ,CAAC,EAAD,CAA1D;AAEA,MAAIkB,UAAU,GAAG,EAAjB;AACA,MAAIC,eAAe,GAAG,EAAtB;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,UAApB,GAAiC,SAAjC;AACAH,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,gBAApB,GAAuC,WAAvC;AACAJ,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBG,MAApB,GAA6B,MAA7B;AACAL,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBI,MAApB,GAA6B,GAA7B;AACAN,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBK,oBAApB,GAA2C,OAA3C;AACD,GANQ,EAMN,EANM,CAAT;AAQA5B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,eAAe,GAAG,YAAY;AAClC,UAAI;AACF,cAAMC,kBAAkB,GAAG,MAAMnB,WAAW,CAC1C,6CAD0C,CAA5C;AAGAG,QAAAA,mBAAmB,CAACgB,kBAAkB,CAACC,OAApB,CAAnB;AACAf,QAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAG,QAAAA,UAAU,GAAGW,kBAAkB,CAACC,OAAhC;AACD,OAPD,CAOE,OAAOC,GAAP,EAAY,CAAE;AACjB,KATD;;AAWAH,IAAAA,eAAe;AAChB,GAbQ,EAaN,CAAClB,WAAD,CAbM,CAAT;AAeAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiC,gBAAgB,GAAG,YAAY;AACnC,UAAI;AACF,cAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CACbC,YAAY,CAACC,OAAb,CAAqB,UAArB,CADa,EAEbJ,MAFa,CAENK,QAFM,EAAf;AAGA,cAAMC,mBAAmB,GAAG,MAAM7B,WAAW,CAC3C,8CAD2C,EAE3C,MAF2C,EAG3CwB,IAAI,CAACM,SAAL,CAAe;AACbP,UAAAA,MAAM,EAAEA;AADK,SAAf,CAH2C,EAM3C,EAN2C,CAA7C;AASAQ,QAAAA,MAAM,CAACC,MAAP,CAAc9B,gBAAd,EAAgC+B,GAAhC,CAAoC,CAACC,aAAD,EAAgBC,IAAhB,KAAyB;AAC3DJ,UAAAA,MAAM,CAACC,MAAP,CAAcH,mBAAmB,CAACO,WAAlC,EAA+CH,GAA/C,CACE,CAACI,UAAD,EAAaC,IAAb,KAAsB;AACpB,gBAAIJ,aAAa,CAACK,QAAd,KAA2BF,UAAU,CAACE,QAA1C,EACE9B,eAAe,CAAC+B,IAAhB,CAAqB;AACnBD,cAAAA,QAAQ,EAAEL,aAAa,CAACK,QADL;AAEnBE,cAAAA,UAAU,EAAEP,aAAa,CAACO,UAFP;AAGnBC,cAAAA,QAAQ,EAAER,aAAa,CAACQ,QAHL;AAInBC,cAAAA,eAAe,EAAEN,UAAU,CAACO,cAJT;AAKnBC,cAAAA,gBAAgB,EAAG,GAAEC,QAAQ,CAC1BT,UAAU,CAACU,uBAAX,GACCV,UAAU,CAACO,cADb,GAEE,GAHyB,CAI3B;AATiB,aAArB;AAWH,WAdH;AAgBD,SAjBD;AAmBArC,QAAAA,oBAAoB,CAACE,eAAD,CAApB,CAhCE,CAkCF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD,OA3CD,CA2CE,OAAOY,GAAP,EAAY,CAAE;AACjB,KA7CD;;AA+CAC,IAAAA,gBAAgB;AACjB,GAjDQ,EAiDN,CAACtB,WAAD,EAAcE,gBAAd,CAjDM,CAAT;AAmDAb,EAAAA,SAAS,CAAC,MAAM;AAGdgB,IAAAA,oBAAoB,CAClB0B,MAAM,CAACC,MAAP,CAAc9B,gBAAd,EAAgC8C,MAAhC,CAAwCC,MAAD,IAAY;AACjD3C,MAAAA,iBAAiB,CAAC4C,OAAlB,CAA2Bb,UAAD,IAAgB;AACxCc,QAAAA,OAAO,CAACC,GAAR,CAAYf,UAAU,CAACE,QAAX,KAAwBU,MAAM,CAACV,QAA3C;;AACA,YAAIF,UAAU,CAACE,QAAX,KAAwBU,MAAM,CAACV,QAAnC,EAA6C;AAC3C,iBAAO,KAAP;AACD;AACF,OALD;AAOA,aAAO,IAAP;AACD,KATD,CADkB,CAApB;AAYD,GAfQ,EAeN,CAACjC,iBAAD,CAfM,CAAT;AAiBA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEP,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGH,SAAS,iBACR;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHJ,eAOE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEG,CAAC,CAACA,SAAD,IAAcD,KAAf,kBACC,oBAAC,WAAD;AACE,IAAA,KAAK,EAAES,iBADT;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,IAAA,IAAI,MAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAPF,eAiBE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEG,CAAC,CAACR,SAAD,IAAcD,KAAf,kBACC,oBAAC,WAAD;AACE,IAAA,KAAK,EAAEO,iBADT;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,IAAA,GAAG,MAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAjBF,CADF;AA8BD,CArID;;AAuIA,eAAeR,OAAf","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport CoursesList from \"../components/CoursesList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./Courses.css\";\n\nconst Courses = () => {\n  const DEBUG = false;\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedAllCourses, setLoadedAllCourses] = useState([]);\n  const [updatedAllCourses, setUpdatedAllCourses] = useState([]);\n\n\n  const [loadedUserCourses, setLoadedUserCourses] = useState([]);\n\n  let allCourses = [];\n  let userCoursesList = [];\n\n  useEffect(() => {\n    document.body.style.background = \"#ffffff\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.height = \"100%\";\n    document.body.style.margin = \"0\";\n    document.body.style.backgroundAttachment = \"fixed\";\n  }, []);\n\n  useEffect(() => {\n    const fetchAllCourses = async () => {\n      try {\n        const allCoursesResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/allCourses\"\n        );\n        setLoadedAllCourses(allCoursesResponse.courses);\n        setUpdatedAllCourses(true);\n        allCourses = allCoursesResponse.courses;\n      } catch (err) {}\n    };\n\n    fetchAllCourses();\n  }, [sendRequest]);\n\n  useEffect(() => {\n    const fetchUserCourses = async () => {\n      try {\n        const userId = JSON.parse(\n          localStorage.getItem(\"userData\")\n        ).userId.toString();\n        const userCoursesResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/userCourses\",\n          \"POST\",\n          JSON.stringify({\n            userId: userId,\n          }),\n          {}\n        );\n\n        Object.values(loadedAllCourses).map((currentCourse, idx1) => {\n          Object.values(userCoursesResponse.userCourses).map(\n            (userCourse, idx2) => {\n              if (currentCourse.courseId === userCourse.courseId)\n                userCoursesList.push({\n                  courseId: currentCourse.courseId,\n                  courseName: currentCourse.courseName,\n                  subjects: currentCourse.subjects,\n                  questionsAmount: userCourse.questionAmount,\n                  courseCompletion: `${parseInt(\n                    (userCourse.questionCompletedAmount /\n                      userCourse.questionAmount) *\n                      100\n                  )}%`,\n                });\n            }\n          );\n        });\n\n        setLoadedUserCourses(userCoursesList);\n\n        // setLoadedAllCourses((allCourses) =>\n        //   allCourses.filter((course) => {\n        //     userCoursesList.forEach((userCourse) => {\n        //       if (userCourse.courseId === course.courseId) return true;\n        //     });\n\n        //     return false;\n        //   })\n        // );\n      } catch (err) {}\n    };\n\n    fetchUserCourses();\n  }, [sendRequest, loadedAllCourses]);\n\n  useEffect(() => {\n\n\n    setUpdatedAllCourses(\n      Object.values(loadedAllCourses).filter((course) => {\n        loadedUserCourses.forEach((userCourse) => {\n          console.log(userCourse.courseId === course.courseId);\n          if (userCourse.courseId === course.courseId) {\n            return false;\n          }\n        });\n\n        return true;\n      })\n    );\n  }, [loadedUserCourses]);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className=\"courses-list_user\">\n        <h1>Your courses</h1>\n        {(!isLoading || DEBUG) && (\n          <CoursesList\n            items={loadedUserCourses}\n            className=\"course-list__list\"\n            user\n          />\n        )}\n      </div>\n      <div className=\"courses-list_all\">\n        <h1>All Courses</h1>\n        {(!isLoading || DEBUG) && (\n          <CoursesList\n            items={updatedAllCourses}\n            className=\"course-list__list\"\n            all\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Courses;\n"]},"metadata":{},"sourceType":"module"}