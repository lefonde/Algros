{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saris\\\\Documents\\\\Alex\\\\final project BAK 2\\\\src\\\\problem\\\\pages\\\\Problem.js\";\nimport React, { useEffect, useState } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = true;\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedQuestions, setloadedQuestions] = useState([]);\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState();\n  const [forumMessages, setforumMessages] = useState();\n  useEffect(() => {\n    if (DEBUG) {\n      const DEBUG_allForumMessages = {\n        1: {\n          1: {\n            message: \"cool sum solution\",\n            user: \"Anna\",\n            data: \"23.09.1991\"\n          },\n          2: {\n            message: \"will it work?\",\n            user: \"Fanna\",\n            data: \"23.09.2020\"\n          }\n        },\n        2: {\n          1: {\n            message: \"array sum solution with C\",\n            user: \"David\",\n            data: \"23.05.2021\"\n          },\n          2: {\n            message: \"will it work? with C!\",\n            user: \"David\",\n            data: \"22.05.2021\"\n          }\n        }\n      };\n      const DEBUG_allQuestions = {\n        firstQuestionIndex: 1,\n        questions: {\n          1: {\n            questionId: 1,\n            level: \"Easy\",\n            questionName: \"sum\",\n            done: true,\n            questionBody: \"user gets two numbers and return the sum\"\n          },\n          2: {\n            questionId: 2,\n            level: \"Easy\",\n            questionName: \"array sum\",\n            done: false,\n            questionBody: \"user gets arrayrs and return the sum\"\n          }\n        }\n      };\n      setloadedQuestions(DEBUG_allQuestions.questions);\n      setloadedQuestionIndex(DEBUG_allQuestions.firstQuestionIndex);\n      setforumMessages(DEBUG_allForumMessages[loadedQuestionIndex]);\n      console.log(loadedQuestions);\n      console.log(forumMessages);\n      return;\n    }\n\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/questions\", \"POST\", JSON.stringify({\n          userId: \"1\",\n          courseId: \"1\"\n        }), {});\n        setloadedQuestions(questionsResponse);\n        console.log(questionsResponse);\n      } catch (err) {}\n    };\n\n    fetchQuestions(sendRequest);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(SplitPane, {\n    split: \"vertical\",\n    minSize: 20,\n    defaultSize: 700,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Pane, {\n    initialSize: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, (!isLoading || DEBUG) && /*#__PURE__*/React.createElement(Question, {\n    blabla: \"blublu\",\n    questions: loadedQuestions,\n    index: loadedQuestionIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Pane, {\n    initialSize: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Answer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Problem;","map":{"version":3,"sources":["C:/Users/saris/Documents/Alex/final project BAK 2/src/problem/pages/Problem.js"],"names":["React","useEffect","useState","SplitPane","Pane","ErrorModal","LoadingSpinner","useHttpClient","Answer","Question","Problem","DEBUG","isLoading","error","sendRequest","clearError","loadedQuestions","setloadedQuestions","loadedQuestionIndex","setloadedQuestionIndex","forumMessages","setforumMessages","DEBUG_allForumMessages","message","user","data","DEBUG_allQuestions","firstQuestionIndex","questions","questionId","level","questionName","done","questionBody","console","log","fetchQuestions","questionsResponse","JSON","stringify","userId","courseId","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\n\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = true;\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedQuestions, setloadedQuestions] = useState([]);\n  const [loadedQuestionIndex, setloadedQuestionIndex] = useState();\n  const [forumMessages, setforumMessages] = useState();\n\n  useEffect(() => {\n    if (DEBUG) {\n\n      const DEBUG_allForumMessages = {\n        1: {\n          1:{\n            message: \"cool sum solution\",\n            user: \"Anna\",\n            data: \"23.09.1991\"\n          },\n          2:{\n            message: \"will it work?\",\n            user: \"Fanna\",\n            data: \"23.09.2020\"\n          }\n        },\n        2: {\n          1:{\n            message: \"array sum solution with C\",\n            user: \"David\",\n            data: \"23.05.2021\"\n          },\n          2:{\n            message: \"will it work? with C!\",\n            user: \"David\",\n            data: \"22.05.2021\"\n          }\n        },\n        \n       };\n      \n      const DEBUG_allQuestions = {\n        firstQuestionIndex: 1,\n        questions: {\n          1: {\n            questionId: 1,\n            level: \"Easy\",\n            questionName: \"sum\",\n            done: true,\n            questionBody: \"user gets two numbers and return the sum\",\n          },\n          2: {\n            questionId: 2,\n            level: \"Easy\",\n            questionName: \"array sum\",\n            done: false,\n            questionBody: \"user gets arrayrs and return the sum\",\n          },\n        },\n      };\n\n      setloadedQuestions(DEBUG_allQuestions.questions);\n      setloadedQuestionIndex(DEBUG_allQuestions.firstQuestionIndex);\n      setforumMessages(DEBUG_allForumMessages[loadedQuestionIndex]);\n      console.log(loadedQuestions);\n      console.log(forumMessages);\n      return;\n    }\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/questions\",\n          \"POST\",\n          JSON.stringify({\n            userId: \"1\",\n            courseId: \"1\",\n          }),\n          {}\n        );\n        setloadedQuestions(questionsResponse);\n        console.log(questionsResponse);\n      } catch (err) {}\n    };\n\n    fetchQuestions(sendRequest);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <SplitPane split=\"vertical\" minSize={20} defaultSize={700}>\n        <Pane initialSize=\"150px\">\n          {(!isLoading || DEBUG) && <Question blabla= \"blublu\" questions={loadedQuestions} index={loadedQuestionIndex} />}\n        </Pane>\n        <Pane initialSize=\"150px\">\n          <Answer />\n        </Pane>\n      </SplitPane>\n    </React.Fragment>\n  );\n};\n\nexport default Problem;\n"]},"metadata":{},"sourceType":"module"}