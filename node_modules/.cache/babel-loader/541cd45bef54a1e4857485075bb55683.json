{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saris\\\\Documents\\\\Alex\\\\final project BAK 2\\\\src\\\\problem\\\\pages\\\\Problem.js\";\nimport React, { useEffect, useState } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = false;\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedQuestions, setloadedQuestions] = useState();\n  const [loadedQuestionName, setloadedQuestionName] = useState([]);\n  const [loadedQuestionBody, setloadedQuestionBody] = useState([]);\n  const DEBUG_allQuestions = {\n    firstQuestionIndex: 2,\n    questions: {\n      1: {\n        questionId: 1,\n        level: \"Easy\",\n        questionName: \"sum\",\n        done: true,\n        questionBody: \"user gets two numbers and return the sum\"\n      },\n      2: {\n        questionId: 2,\n        level: \"Easy\",\n        questionName: \"array sum\",\n        done: false,\n        questionBody: \"user gets arrayrs and return the sum\"\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/questions\", \"POST\", JSON.stringify({\n          userId: \"1\",\n          courseId: \"1\"\n        }), {});\n        setloadedQuestions(questionsResponse);\n      } catch (err) {}\n    };\n\n    fetchQuestions();\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(SplitPane, {\n    split: \"vertical\",\n    minSize: 20,\n    defaultSize: 700,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Pane, {\n    initialSize: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, !isLoading && /*#__PURE__*/React.createElement(Question, {\n    questions: loadedQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 26\n    }\n  }), DEBUG && /*#__PURE__*/React.createElement(Question, {\n    questions: loadedQuestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Pane, {\n    initialSize: \"150px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Answer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default Problem;","map":{"version":3,"sources":["C:/Users/saris/Documents/Alex/final project BAK 2/src/problem/pages/Problem.js"],"names":["React","useEffect","useState","SplitPane","Pane","ErrorModal","LoadingSpinner","useHttpClient","Answer","Question","Problem","DEBUG","isLoading","error","sendRequest","clearError","loadedQuestions","setloadedQuestions","loadedQuestionName","setloadedQuestionName","loadedQuestionBody","setloadedQuestionBody","DEBUG_allQuestions","firstQuestionIndex","questions","questionId","level","questionName","done","questionBody","fetchQuestions","questionsResponse","JSON","stringify","userId","courseId","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport SplitPane, { Pane } from \"react-split-pane\";\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport Answer from \"../components/Answer\";\nimport Question from \"../components/Question\";\n\nimport \"./Problem.css\";\n\nconst Problem = () => {\n  const DEBUG = false;\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedQuestions, setloadedQuestions] = useState();\n  const [loadedQuestionName, setloadedQuestionName] = useState([]);\n  const [loadedQuestionBody, setloadedQuestionBody] = useState([]);\n\n\n  const DEBUG_allQuestions = {\n    firstQuestionIndex: 2,\n    questions: {\n      1: {\n        questionId: 1,\n        level: \"Easy\",\n        questionName: \"sum\",\n        done: true,\n        questionBody: \"user gets two numbers and return the sum\",\n      },\n      2: {\n        questionId: 2,\n        level: \"Easy\",\n        questionName: \"array sum\",\n        done: false,\n        questionBody: \"user gets arrayrs and return the sum\",\n      },\n    },\n  };\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const questionsResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/questions\",\n          \"POST\",\n          JSON.stringify({\n            userId: \"1\",\n            courseId: \"1\",\n          }),\n          {}\n        );\n        setloadedQuestions(questionsResponse);\n      } catch (err) {}\n    };\n\n    fetchQuestions();\n  })\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <SplitPane split=\"vertical\" minSize={20} defaultSize={700}>\n        <Pane initialSize=\"150px\">\n          {!isLoading && <Question questions={loadedQuestions} />}\n          {DEBUG && (\n            <Question questions={loadedQuestions}/>\n          )}\n        </Pane>\n        <Pane initialSize=\"150px\">\n          <Answer />\n        </Pane>\n      </SplitPane>\n    </React.Fragment>\n  );\n};\n\nexport default Problem;\n"]},"metadata":{},"sourceType":"module"}