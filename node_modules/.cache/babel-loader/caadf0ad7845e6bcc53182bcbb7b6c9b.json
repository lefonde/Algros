{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/mta/year 4/final project/Algros/src/courses/pages/Courses.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ScrollArea from \"react-scrollbar\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport CoursesList from \"../components/CoursesList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./Courses.css\";\n\nconst Courses = () => {\n  const DEBUG = false;\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedAllCourses, setLoadedAllCourses] = useState([]);\n  const [loadedUserCourses, setLoadedUserCourses] = useState([]);\n  let allCourses = [];\n  useEffect(() => {\n    document.body.style.background = \"#ffffff\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.height = \"100%\";\n    document.body.style.margin = \"0\";\n    document.body.style.backgroundAttachment = \"fixed\";\n\n    if (DEBUG) {\n      const testCourses = {\n        1: {\n          courseName: \"sum course\",\n          subjects: \"base, array\",\n          courseId: 1\n        },\n        2: {\n          courseName: \"squre course\",\n          subjects: \"base\",\n          courseId: 2\n        }\n      };\n      setLoadedAllCourses(testCourses);\n      return;\n    }\n\n    const fetchAllCourses = async () => {\n      try {\n        const allCoursesResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/allCourses\");\n        console.log(allCoursesResponse);\n        setLoadedAllCourses(allCoursesResponse.courses);\n        allCourses = allCoursesResponse.courses;\n      } catch (err) {}\n    };\n\n    const fetchUserCourses = async () => {\n      try {\n        const userCoursesResponse = await sendRequest(\"http://51.138.73.135:8080/Algors/userCourses\", \"POST\", JSON.stringify({\n          userId: \"50\"\n        }), {});\n        let userCoursesIds = [];\n        Object.values(userCoursesResponse.userCourses).map(course => {\n          userCoursesIds.push({\n            courseId: course.courseId,\n            courseCompletion: \"35%\"\n          });\n        });\n        let test = [];\n        Object.values(allCourses).map((currentCourse, idx1) => {\n          Object.values(userCoursesResponse.userCourses).map((userCourse, idx2) => {\n            if (currentCourse.courseId === userCourse.courseId) test.push({\n              courseId: currentCourse.courseId,\n              courseName: currentCourse.courseName,\n              courseCompletion: \"25%\"\n            });\n          }); //if (userCoursesIds.some(course => course.courseId.includes(currentCourse.courseId))) test.push(currentCourse);\n        });\n        setLoadedUserCourses(test);\n      } catch (err) {}\n    };\n\n    fetchAllCourses();\n    fetchUserCourses(); // let userCourses = [];\n    // Object.values(loadedUserCourses).map((course, idx) => {\n    //   console.log(\"loadedAllCourses[course.courseId]\")\n    //   console.log(loadedAllCourses[course.courseId])\n    // })\n  }, [sendRequest]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"courses-list_user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, \"Your courses\"), (!isLoading || DEBUG) && /*#__PURE__*/React.createElement(CoursesList, {\n    items: loadedUserCourses,\n    className: \"course-list__list\",\n    user: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"courses-list_all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"All Courses\"), (!isLoading || DEBUG) && /*#__PURE__*/React.createElement(CoursesList, {\n    items: loadedAllCourses,\n    className: \"course-list__list\",\n    all: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Courses;","map":{"version":3,"sources":["/home/alex/Documents/mta/year 4/final project/Algros/src/courses/pages/Courses.js"],"names":["React","useEffect","useState","useContext","ScrollArea","ErrorModal","CoursesList","LoadingSpinner","AuthContext","useHttpClient","Courses","DEBUG","auth","isLoading","error","sendRequest","clearError","loadedAllCourses","setLoadedAllCourses","loadedUserCourses","setLoadedUserCourses","allCourses","document","body","style","background","backgroundRepeat","height","margin","backgroundAttachment","testCourses","courseName","subjects","courseId","fetchAllCourses","allCoursesResponse","console","log","courses","err","fetchUserCourses","userCoursesResponse","JSON","stringify","userId","userCoursesIds","Object","values","userCourses","map","course","push","courseCompletion","test","currentCourse","idx1","userCourse","idx2"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport ScrollArea from \"react-scrollbar\";\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport CoursesList from \"../components/CoursesList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./Courses.css\";\n\nconst Courses = () => {\n  const DEBUG = false;\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedAllCourses, setLoadedAllCourses] = useState([]);\n  const [loadedUserCourses, setLoadedUserCourses] = useState([]);\n  let allCourses = [];\n\n  useEffect(() => {\n    document.body.style.background = \"#ffffff\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.height = \"100%\";\n    document.body.style.margin = \"0\";\n    document.body.style.backgroundAttachment = \"fixed\";\n\n    if (DEBUG) {\n      const testCourses = {\n        1: { courseName: \"sum course\", subjects: \"base, array\", courseId: 1 },\n        2: { courseName: \"squre course\", subjects: \"base\", courseId: 2 },\n      };\n\n      setLoadedAllCourses(testCourses);\n      return;\n    }\n\n    const fetchAllCourses = async () => {\n      try {\n        const allCoursesResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/allCourses\"\n        );\n        console.log(allCoursesResponse);\n        setLoadedAllCourses(allCoursesResponse.courses);\n        allCourses = allCoursesResponse.courses;\n      } catch (err) {}\n    };\n\n    const fetchUserCourses = async () => {\n      try {\n        const userCoursesResponse = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/userCourses\",\n          \"POST\",\n          JSON.stringify({\n            userId: \"50\",\n          }),\n          {}\n        );\n\n        let userCoursesIds = [];\n        Object.values(userCoursesResponse.userCourses).map((course) => {\n          userCoursesIds.push({\n            courseId: course.courseId,\n            courseCompletion: \"35%\",\n          });\n        });\n\n        let test = [];\n        Object.values(allCourses).map((currentCourse, idx1) => {\n          Object.values(userCoursesResponse.userCourses).map(\n            (userCourse, idx2) => {\n              if (currentCourse.courseId === userCourse.courseId)\n                test.push({\n                  courseId: currentCourse.courseId,\n                  courseName: currentCourse.courseName,\n                  courseCompletion: \"25%\",\n                });\n            }\n          );\n          //if (userCoursesIds.some(course => course.courseId.includes(currentCourse.courseId))) test.push(currentCourse);\n        });\n        setLoadedUserCourses(test);\n      } catch (err) {}\n    };\n\n    fetchAllCourses();\n    fetchUserCourses();\n\n    // let userCourses = [];\n    // Object.values(loadedUserCourses).map((course, idx) => {\n    //   console.log(\"loadedAllCourses[course.courseId]\")\n    //   console.log(loadedAllCourses[course.courseId])\n    // })\n  }, [sendRequest]);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className=\"courses-list_user\">\n        <h1>Your courses</h1>\n        {(!isLoading || DEBUG) && (\n          <CoursesList\n            items={loadedUserCourses}\n            className=\"course-list__list\"\n            user\n          />\n        )}\n      </div>\n      <div className=\"courses-list_all\">\n        <h1>All Courses</h1>\n        {(!isLoading || DEBUG) && (\n          <CoursesList\n            items={loadedAllCourses}\n            className=\"course-list__list\"\n            all\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Courses;\n"]},"metadata":{},"sourceType":"module"}