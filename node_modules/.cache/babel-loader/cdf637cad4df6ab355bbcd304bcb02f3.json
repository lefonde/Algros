{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saris\\\\Documents\\\\Alex\\\\final project BAK 2\\\\src\\\\authentication\\\\pages\\\\Auth.js\";\nimport React, { useState, useContext } from \"react\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const DEBUG = false;\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(false);\n  const [userError, setUserError] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    name: {\n      value: \"\",\n      isValid: false\n    },\n    email: {\n      value: \"\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({ ...formState.inputs,\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: \"\",\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n\n    if (DEBUG) {\n      auth.login(1);\n      return;\n    }\n\n    if (isLoginMode) {\n      try {\n        const loginResponseData = await sendRequest(\"http://51.138.73.135:8080/Algors/login\", \"POST\", JSON.stringify({\n          email: formState.inputs.email.value,\n          userName: formState.inputs.name.value,\n          password: formState.inputs.password.value\n        }), {});\n        console.log(\"loginResponseData.userId\");\n        console.log(loginResponseData.userId);\n\n        if (loginResponseData.userId === -1) {\n          setUserError(\"username or password is incorrect.\");\n        } else {\n          auth.login(loginResponseData.userId);\n        }\n      } catch (err) {}\n    } else {\n      try {\n        const signUpResponseData = await sendRequest(\"http://51.138.73.135:8080/Algors/signUp\", \"POST\", JSON.stringify({\n          email: formState.inputs.email.value,\n          userName: formState.inputs.name.value,\n          password: formState.inputs.password.value\n        }), {});\n        console.log(\"signUpResponseData.userId\");\n        console.log(signUpResponseData.userId);\n\n        if (signUpResponseData.userId === -1) {\n          setUserError(\"user already exists.\");\n        } else {\n          auth.login(signUpResponseData.userId);\n        }\n      } catch (err) {}\n    }\n  };\n\n  const clearUserError = () => {\n    setUserError(null);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ErrorModal, {\n    error: userError,\n    onClear: clearUserError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Just a moment and you're in\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"name\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter your name.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    placeholder: \"email\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Please enter a valid email address.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    placeholder: \"password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid password, at least 5 characters.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"authentication__links\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"authentication__link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"forgot password?\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"authentication__link\",\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, \" \", isLoginMode ? \"new bro? sign up.\" : \"oh, we've met? login\", \" \")), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, isLoginMode ? \"Sign in\" : \"Create acount\"))));\n};\n\nexport default Auth;","map":{"version":3,"sources":["C:/Users/saris/Documents/Alex/final project BAK 2/src/authentication/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","Button","ErrorModal","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","useHttpClient","AuthContext","Auth","DEBUG","auth","isLoginMode","setIsLoginMode","userError","setUserError","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","name","value","isValid","email","password","switchModeHandler","inputs","undefined","prevMode","authSubmitHandler","event","preventDefault","console","log","login","loginResponseData","JSON","stringify","userName","userId","err","signUpResponseData","clearUserError"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hooks\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const DEBUG = false;\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(false);\n  const [userError, setUserError] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      name: {\n        value: \"\",\n        isValid: false,\n      },\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n    console.log(formState.inputs);\n\n    if (DEBUG) {\n      auth.login(1);\n      return;\n    }\n\n    if (isLoginMode) {\n      try {\n        const loginResponseData = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/login\",\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            userName: formState.inputs.name.value,\n            password: formState.inputs.password.value,\n          }),\n          {}\n        );\n        console.log(\"loginResponseData.userId\");\n        console.log(loginResponseData.userId);\n\n        if (loginResponseData.userId === -1) {\n          setUserError(\"username or password is incorrect.\");\n        } else {\n          auth.login(loginResponseData.userId);\n        }\n      } catch (err) {}\n    } else {\n      try {\n        const signUpResponseData = await sendRequest(\n          \"http://51.138.73.135:8080/Algors/signUp\",\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            userName: formState.inputs.name.value,\n            password: formState.inputs.password.value,\n          }),\n          {}\n        );\n\n        console.log(\"signUpResponseData.userId\");\n        console.log(signUpResponseData.userId);\n\n        if (signUpResponseData.userId === -1) {\n          setUserError(\"user already exists.\");\n        } else {\n          auth.login(signUpResponseData.userId);\n        }\n      } catch (err) {}\n    }\n  };\n\n  const clearUserError = () => {\n    setUserError(null);\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <ErrorModal error={userError} onClear={clearUserError} />\n      <Card className=\"authentication\">\n        <h2>Just a moment and you're in</h2>\n        <form onSubmit={authSubmitHandler}>\n          <Input\n            element=\"input\"\n            id=\"name\"\n            type=\"text\"\n            placeholder=\"name\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter your name.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"email\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            placeholder=\"password\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid password, at least 5 characters.\"\n            onInput={inputHandler}\n          />\n          <div className=\"authentication__links\">\n            <button type=\"button\" className=\"authentication__link\">\n              forgot password?\n            </button>\n            <button\n              type=\"button\"\n              className=\"authentication__link\"\n              onClick={switchModeHandler}\n            >\n              {\" \"}\n              {isLoginMode ? \"new bro? sign up.\" : \"oh, we've met? login\"}{\" \"}\n            </button>\n          </div>\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"Sign in\" : \"Create acount\"}\n          </Button>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}