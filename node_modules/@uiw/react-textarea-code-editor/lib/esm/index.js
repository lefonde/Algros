import _extends from "@babel/runtime/helpers/extends";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["prefixCls", "value", "padding", "minHeight", "placeholder", "language", "className", "style", "onChange"];
import React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { processHtml, htmlEncode } from './utils';
import shortcuts from './shortcuts';
import * as styles from './styles';
import "./style/index.css";
export * from './SelectionText';
export default /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? 'w-tc-editor' : _props$prefixCls,
      _ = props.value,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 10 : _props$padding,
      _props$minHeight = props.minHeight,
      minHeight = _props$minHeight === void 0 ? 16 : _props$minHeight,
      placeholder = props.placeholder,
      language = props.language,
      className = props.className,
      style = props.style,
      _onChange = props.onChange,
      other = _objectWithoutProperties(props, _excluded);

  var _useState = useState(props.value || ''),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  useEffect(function () {
    return setValue(props.value || '');
  }, [props.value]);
  var textRef = useRef(null);
  useImperativeHandle(ref, function () {
    return textRef.current;
  });
  var contentStyle = {
    paddingTop: padding,
    paddingRight: padding,
    paddingBottom: padding,
    paddingLeft: padding
  };
  var htmlStr = useMemo(function () {
    return processHtml("<pre aria-hidden=true><code ".concat(language ? "class=\"language-".concat(language, "\"") : '', " >").concat(htmlEncode(String(value || '')), "</code><br /></pre>"));
  }, [value, language]);
  var preView = useMemo(function () {
    return /*#__PURE__*/React.createElement("div", {
      style: _objectSpread(_objectSpread(_objectSpread({}, styles.editor), contentStyle), {}, {
        minHeight: minHeight
      }),
      className: "".concat(prefixCls, "-preview ").concat(language ? "language-".concat(language) : ''),
      dangerouslySetInnerHTML: {
        __html: htmlStr
      }
    });
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [prefixCls, language, htmlStr]);
  return /*#__PURE__*/React.createElement("div", {
    style: _objectSpread(_objectSpread({}, styles.container), style),
    className: "".concat(prefixCls, " ").concat(className || '')
  }, /*#__PURE__*/React.createElement("textarea", _extends({
    autoComplete: "off",
    autoCorrect: "off",
    spellCheck: "false",
    autoCapitalize: "off"
  }, other, {
    placeholder: placeholder,
    onKeyDown: function onKeyDown(evn) {
      shortcuts(evn);
      other.onKeyDown && other.onKeyDown(evn);
    },
    style: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, styles.editor), styles.textarea), contentStyle), {}, {
      minHeight: minHeight
    }, placeholder && !value ? {
      WebkitTextFillColor: 'inherit'
    } : {}),
    ref: textRef,
    onChange: function onChange(evn) {
      setValue(evn.target.value);
      _onChange && _onChange(evn);
    },
    className: "".concat(prefixCls, "-text"),
    value: value
  })), preView);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,