"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shortcuts;

var _utils = require("./utils");

var _SelectionText = require("./SelectionText");

function shortcuts(e) {
  var api = new _SelectionText.SelectionText(e.target);

  if (e.code && e.code.toLowerCase() === 'tab') {
    (0, _utils.stopPropagation)(e);

    if (api.start === api.end) {
      api.insertText('  ').position(api.start + 2, api.end + 2);
    } else if (api.getSelectedValue().indexOf('\n') > -1 && e.shiftKey) {
      api.lineStarRemove('  ');
    } else if (api.getSelectedValue().indexOf('\n') > -1) {
      api.lineStarInstert('  ');
    } else {
      api.insertText('  ').position(api.start + 2, api.end);
    }

    api.notifyChange();
  } else if (e.code && e.code.toLowerCase() === 'enter') {
    (0, _utils.stopPropagation)(e);
    var indent = "\n".concat(api.getIndentText());
    api.insertText(indent).position(api.start + indent.length, api.start + indent.length);
    api.notifyChange();
  } else if (e.code && /^(quote|backquote|bracketleft|digit9|comma)$/.test(e.code.toLowerCase()) && api.getSelectedValue()) {
    (0, _utils.stopPropagation)(e);
    var val = api.getSelectedValue();
    var txt = '';

    switch (e.code.toLowerCase()) {
      case 'quote':
        txt = "'".concat(val, "'");

        if (e.shiftKey) {
          txt = "\"".concat(val, "\"");
        }

        break;

      case 'backquote':
        txt = "`".concat(val, "`");
        break;

      case 'bracketleft':
        txt = "[".concat(val, "]");

        if (e.shiftKey) {
          txt = "{".concat(val, "}");
        }

        break;

      case 'digit9':
        txt = "(".concat(val, ")");
        break;

      case 'comma':
        txt = "<".concat(val, ">");
        break;
    }

    api.insertText(txt);
    api.notifyChange();
  }
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaG9ydGN1dHMudHMiXSwibmFtZXMiOlsic2hvcnRjdXRzIiwiZSIsImFwaSIsIlNlbGVjdGlvblRleHQiLCJ0YXJnZXQiLCJjb2RlIiwidG9Mb3dlckNhc2UiLCJzdGFydCIsImVuZCIsImluc2VydFRleHQiLCJwb3NpdGlvbiIsImdldFNlbGVjdGVkVmFsdWUiLCJpbmRleE9mIiwic2hpZnRLZXkiLCJsaW5lU3RhclJlbW92ZSIsImxpbmVTdGFySW5zdGVydCIsIm5vdGlmeUNoYW5nZSIsImluZGVudCIsImdldEluZGVudFRleHQiLCJsZW5ndGgiLCJ0ZXN0IiwidmFsIiwidHh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRWUsU0FBU0EsU0FBVCxDQUFtQkMsQ0FBbkIsRUFBZ0U7QUFDN0UsTUFBTUMsR0FBRyxHQUFHLElBQUlDLDRCQUFKLENBQWtCRixDQUFDLENBQUNHLE1BQXBCLENBQVo7O0FBQ0EsTUFBSUgsQ0FBQyxDQUFDSSxJQUFGLElBQVVKLENBQUMsQ0FBQ0ksSUFBRixDQUFPQyxXQUFQLE9BQXlCLEtBQXZDLEVBQThDO0FBQzVDLGdDQUFnQkwsQ0FBaEI7O0FBQ0EsUUFBSUMsR0FBRyxDQUFDSyxLQUFKLEtBQWNMLEdBQUcsQ0FBQ00sR0FBdEIsRUFBMkI7QUFDekJOLE1BQUFBLEdBQUcsQ0FBQ08sVUFBSixDQUFlLElBQWYsRUFBcUJDLFFBQXJCLENBQThCUixHQUFHLENBQUNLLEtBQUosR0FBWSxDQUExQyxFQUE2Q0wsR0FBRyxDQUFDTSxHQUFKLEdBQVUsQ0FBdkQ7QUFDRCxLQUZELE1BRU8sSUFBSU4sR0FBRyxDQUFDUyxnQkFBSixHQUF1QkMsT0FBdkIsQ0FBK0IsSUFBL0IsSUFBdUMsQ0FBQyxDQUF4QyxJQUE2Q1gsQ0FBQyxDQUFDWSxRQUFuRCxFQUE2RDtBQUNsRVgsTUFBQUEsR0FBRyxDQUFDWSxjQUFKLENBQW1CLElBQW5CO0FBQ0QsS0FGTSxNQUVBLElBQUlaLEdBQUcsQ0FBQ1MsZ0JBQUosR0FBdUJDLE9BQXZCLENBQStCLElBQS9CLElBQXVDLENBQUMsQ0FBNUMsRUFBK0M7QUFDcERWLE1BQUFBLEdBQUcsQ0FBQ2EsZUFBSixDQUFvQixJQUFwQjtBQUNELEtBRk0sTUFFQTtBQUNMYixNQUFBQSxHQUFHLENBQUNPLFVBQUosQ0FBZSxJQUFmLEVBQXFCQyxRQUFyQixDQUE4QlIsR0FBRyxDQUFDSyxLQUFKLEdBQVksQ0FBMUMsRUFBNkNMLEdBQUcsQ0FBQ00sR0FBakQ7QUFDRDs7QUFDRE4sSUFBQUEsR0FBRyxDQUFDYyxZQUFKO0FBQ0QsR0FaRCxNQVlPLElBQUlmLENBQUMsQ0FBQ0ksSUFBRixJQUFVSixDQUFDLENBQUNJLElBQUYsQ0FBT0MsV0FBUCxPQUF5QixPQUF2QyxFQUFnRDtBQUNyRCxnQ0FBZ0JMLENBQWhCO0FBQ0EsUUFBTWdCLE1BQU0sZUFBUWYsR0FBRyxDQUFDZ0IsYUFBSixFQUFSLENBQVo7QUFDQWhCLElBQUFBLEdBQUcsQ0FBQ08sVUFBSixDQUFlUSxNQUFmLEVBQXVCUCxRQUF2QixDQUFnQ1IsR0FBRyxDQUFDSyxLQUFKLEdBQVlVLE1BQU0sQ0FBQ0UsTUFBbkQsRUFBMkRqQixHQUFHLENBQUNLLEtBQUosR0FBWVUsTUFBTSxDQUFDRSxNQUE5RTtBQUNBakIsSUFBQUEsR0FBRyxDQUFDYyxZQUFKO0FBQ0QsR0FMTSxNQUtBLElBQ0xmLENBQUMsQ0FBQ0ksSUFBRixJQUNBLCtDQUErQ2UsSUFBL0MsQ0FBb0RuQixDQUFDLENBQUNJLElBQUYsQ0FBT0MsV0FBUCxFQUFwRCxDQURBLElBRUFKLEdBQUcsQ0FBQ1MsZ0JBQUosRUFISyxFQUlMO0FBQ0EsZ0NBQWdCVixDQUFoQjtBQUNBLFFBQU1vQixHQUFHLEdBQUduQixHQUFHLENBQUNTLGdCQUFKLEVBQVo7QUFDQSxRQUFJVyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxZQUFRckIsQ0FBQyxDQUFDSSxJQUFGLENBQU9DLFdBQVAsRUFBUjtBQUNFLFdBQUssT0FBTDtBQUNFZ0IsUUFBQUEsR0FBRyxjQUFPRCxHQUFQLE1BQUg7O0FBQ0EsWUFBSXBCLENBQUMsQ0FBQ1ksUUFBTixFQUFnQjtBQUNkUyxVQUFBQSxHQUFHLGVBQU9ELEdBQVAsT0FBSDtBQUNEOztBQUNEOztBQUNGLFdBQUssV0FBTDtBQUNFQyxRQUFBQSxHQUFHLGNBQVFELEdBQVIsTUFBSDtBQUNBOztBQUNGLFdBQUssYUFBTDtBQUNFQyxRQUFBQSxHQUFHLGNBQU9ELEdBQVAsTUFBSDs7QUFDQSxZQUFJcEIsQ0FBQyxDQUFDWSxRQUFOLEVBQWdCO0FBQ2RTLFVBQUFBLEdBQUcsY0FBT0QsR0FBUCxNQUFIO0FBQ0Q7O0FBQ0Q7O0FBQ0YsV0FBSyxRQUFMO0FBQ0VDLFFBQUFBLEdBQUcsY0FBT0QsR0FBUCxNQUFIO0FBQ0E7O0FBQ0YsV0FBSyxPQUFMO0FBQ0VDLFFBQUFBLEdBQUcsY0FBT0QsR0FBUCxNQUFIO0FBQ0E7QUFyQko7O0FBdUJBbkIsSUFBQUEsR0FBRyxDQUFDTyxVQUFKLENBQWVhLEdBQWY7QUFDQXBCLElBQUFBLEdBQUcsQ0FBQ2MsWUFBSjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdG9wUHJvcGFnYXRpb24gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFNlbGVjdGlvblRleHQgfSBmcm9tICcuL1NlbGVjdGlvblRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG9ydGN1dHMoZTogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50Pikge1xuICBjb25zdCBhcGkgPSBuZXcgU2VsZWN0aW9uVGV4dChlLnRhcmdldCBhcyBIVE1MVGV4dEFyZWFFbGVtZW50KTtcbiAgaWYgKGUuY29kZSAmJiBlLmNvZGUudG9Mb3dlckNhc2UoKSA9PT0gJ3RhYicpIHtcbiAgICBzdG9wUHJvcGFnYXRpb24oZSk7XG4gICAgaWYgKGFwaS5zdGFydCA9PT0gYXBpLmVuZCkge1xuICAgICAgYXBpLmluc2VydFRleHQoJyAgJykucG9zaXRpb24oYXBpLnN0YXJ0ICsgMiwgYXBpLmVuZCArIDIpO1xuICAgIH0gZWxzZSBpZiAoYXBpLmdldFNlbGVjdGVkVmFsdWUoKS5pbmRleE9mKCdcXG4nKSA+IC0xICYmIGUuc2hpZnRLZXkpIHtcbiAgICAgIGFwaS5saW5lU3RhclJlbW92ZSgnICAnKTtcbiAgICB9IGVsc2UgaWYgKGFwaS5nZXRTZWxlY3RlZFZhbHVlKCkuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgYXBpLmxpbmVTdGFySW5zdGVydCgnICAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLmluc2VydFRleHQoJyAgJykucG9zaXRpb24oYXBpLnN0YXJ0ICsgMiwgYXBpLmVuZCk7XG4gICAgfVxuICAgIGFwaS5ub3RpZnlDaGFuZ2UoKTtcbiAgfSBlbHNlIGlmIChlLmNvZGUgJiYgZS5jb2RlLnRvTG93ZXJDYXNlKCkgPT09ICdlbnRlcicpIHtcbiAgICBzdG9wUHJvcGFnYXRpb24oZSk7XG4gICAgY29uc3QgaW5kZW50ID0gYFxcbiR7YXBpLmdldEluZGVudFRleHQoKX1gO1xuICAgIGFwaS5pbnNlcnRUZXh0KGluZGVudCkucG9zaXRpb24oYXBpLnN0YXJ0ICsgaW5kZW50Lmxlbmd0aCwgYXBpLnN0YXJ0ICsgaW5kZW50Lmxlbmd0aCk7XG4gICAgYXBpLm5vdGlmeUNoYW5nZSgpO1xuICB9IGVsc2UgaWYgKFxuICAgIGUuY29kZSAmJlxuICAgIC9eKHF1b3RlfGJhY2txdW90ZXxicmFja2V0bGVmdHxkaWdpdDl8Y29tbWEpJC8udGVzdChlLmNvZGUudG9Mb3dlckNhc2UoKSkgJiZcbiAgICBhcGkuZ2V0U2VsZWN0ZWRWYWx1ZSgpXG4gICkge1xuICAgIHN0b3BQcm9wYWdhdGlvbihlKTtcbiAgICBjb25zdCB2YWwgPSBhcGkuZ2V0U2VsZWN0ZWRWYWx1ZSgpO1xuICAgIGxldCB0eHQgPSAnJztcbiAgICBzd2l0Y2ggKGUuY29kZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdxdW90ZSc6XG4gICAgICAgIHR4dCA9IGAnJHt2YWx9J2A7XG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgdHh0ID0gYFwiJHt2YWx9XCJgO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYmFja3F1b3RlJzpcbiAgICAgICAgdHh0ID0gYFxcYCR7dmFsfVxcYGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYnJhY2tldGxlZnQnOlxuICAgICAgICB0eHQgPSBgWyR7dmFsfV1gO1xuICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgIHR4dCA9IGB7JHt2YWx9fWA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkaWdpdDknOlxuICAgICAgICB0eHQgPSBgKCR7dmFsfSlgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgdHh0ID0gYDwke3ZhbH0+YDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGFwaS5pbnNlcnRUZXh0KHR4dCk7XG4gICAgYXBpLm5vdGlmeUNoYW5nZSgpO1xuICB9XG59XG4iXX0=