'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var dom = require('virtual-dom/h');

var _require = require('../helpers'),
    pattern = _require.pattern;

var defaults = {
  size: 15,
  // size of the pattern
  radius: 3,
  complement: true,
  fill: '#545454',
  // any SVG-compatible color
  strokeWidth: 0,
  stroke: 'none',
  // any SVG-compatible color
  background: null // any SVG-compatible color

};

var circles = function circles() {
  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  opt = Object.assign({}, defaults, opt);
  var s = opt.size;
  var children = [dom('circle', {
    cx: s / 2,
    cy: s / 2,
    r: opt.radius,
    fill: opt.fill,
    stroke: opt.stroke,
    'stroke-width': opt.strokeWidth + ''
  })];

  if (opt.complement === true) {
    for (var _i = 0, _arr = [[0, 0], [0, s], [s, s], [s, 0]]; _i < _arr.length; _i++) {
      var _arr$_i = _slicedToArray(_arr[_i], 2),
          x = _arr$_i[0],
          y = _arr$_i[1];

      children.push(dom('circle', {
        cx: x,
        cy: y,
        r: opt.radius,
        fill: opt.fill,
        stroke: opt.stroke,
        'stroke-width': opt.strokeWidth + ''
      }));
    }
  }

  Object.assign(opt, {
    width: opt.size,
    height: opt.size,
    children: children,
    bg: opt.background
  });
  return pattern(opt);
};

module.exports = circles;